#include<Python3.h>
import csv


# Fungsi Jafar
#Fungsi menghitung panjang kolom / menghitung banyaknya kolom
def column_length(arr_data):
    panjang = 0
    for i in arr_data[0]:
        panjang += 1
    return panjang

    
#Fungsi untuk menghitung panjang baris
def row_length(array_data):    
    jml_baris = 0
    idx_baris = 0
    for row in array_data:
        if array_data[idx_baris][0] == '': #jika di kolom pertama sudah menemukan default value maka terdeteksi bukan data
            break
        jml_baris += 1
        idx_baris += 1
    return jml_baris
    
#fungsi untuk memasukan data csv ke array
def load(arrData, csv_file_path): 
    with open(csv_file_path, 'r') as csv_file:
        csv_reader = csv.reader(csv_file)
        for row in csv_reader:
            temp_array = row #temp_array adalah satu array yang berisi satu baris data pada csv
            idx_baris = row_length(arrData) #ambil indeks yang masih kosong
            for kolom in range(column_length(arrData)):
                arrData[idx_baris][kolom] = temp_array[kolom]

#fungsi untuk membuat file beserta dengan headernya, dibuat hanya jika file belum ada
def create_file(csv_file_path):
    with open(csv_file_path, 'w', newline="") as csv_file:
        writer = csv.writer(csv_file)
        if csv_file_path == ('user.csv'):
            writer.writerow(['Nama', 'Tanggal_Lahir','Tinggi_Badan', 'Username', 'Password', 'Role', 'Saldo'])
            writer.writerow(['admin', '00/00/0000', '0', 'admin', 'password', 'admin', '0']) #ini akun untuk admin
        elif csv_file_path == 'wahana.csv':
            writer.writerow(['ID_Wahana', 'Nama_Wahana','Harga_Tiket', 'Batasan_Umur', 'Batasan_Tinggi'])
        elif csv_file_path == 'pembelian.csv':
            writer.writerow(['Username', 'Tanggal_Pembelian', 'ID_Wahana', 'Jumlah_Tiket'])
        elif csv_file_path == 'penggunaan.csv':
            writer.writerow(['Username', 'Tanggal_Penggunaan', 'ID_Wahana', 'Jumlah_Tiket'])
        elif csv_file_path == 'tiket.csv':
            writer.writerow(['Username', 'ID_Wahana', 'Jumlah_Tiket'])
        elif csv_file_path == 'refund.csv':
            writer.writerow(['Username', 'Tanggal_Refund', 'ID_Wahana', 'Jumlah_Tiket'])
        elif csv_file_path == 'kritiksaran.csv':
            writer.writerow(['Username', 'Tanggal_Kritik', 'ID_Wahana', 'Isi_Kritik'])

#fungsi untuk memasukkan array ke csv
def save_file(arr_data, csv_file_path):
    with open(csv_file_path, 'w', newline='') as csv_file:
        writer = csv.writer(csv_file)
        for i in range(row_length(arr_data)):
            writer.writerow(arr_data[i])
	
	
def cari_pemain(arr_data): #array yang dimasukkan adalah array user
    found = False
    pemain = input("Masukkan username : ")
    for baris in range (row_length(arr_data)):
        if arr_data[baris][3] == pemain:
            print('Nama Pemain :', arr_data[baris][0])
            print('Tinggi Pemain :', arr_data[baris][2], 'cm')
            print("Tanggal lahir pemain :", arr_data[baris][1])
            found = True
            break
    if not found:
        print("Username tidak ditemukan, periksa kembali penulisan username / username tidak ada pada sistem kami")


#prosedur untuk menangani pembuatan file baru atau laod file yang sudah ada
def start_file(arr_data, csv_file_name):
    try:
        load(arr_data, csv_file_name)
    except FileNotFoundError:
        create_file(csv_file_name)
        load(arr_data, csv_file_name)


#Prosedur beli tiket
def beli_tiket(username, arr_data_beli, arr_data_user, arr_data_wahana, arr_data_tiket):
    ID_Wahana = input("Masukkan ID wahana : ") #asumsi user selalu menginput hal yang benar
    tanggal = input("Masukkan tanggal hari ini : {format (DD/MM/YYYY)}") #asumsi input user selalu benar
    jumlah_tiket = int(input("Jumlah tiket yang dibeli : "))

    tahun_beli = int(tanggal[6:]) #dapatkan tahun pembelian
    #dapatkan tanggal lahir,tinggi_badan, dan saldo username yang diakses dari array yang berisi file user.csv
    for idx_baris in range(row_length(arr_data_user)):
        if arr_data_user[idx_baris][3] == username:
            indeks = idx_baris
            Tinggi_Badan = int(arr_data_user[idx_baris][2])
            saldo = int(arr_data_user[idx_baris][6])
            role_user = arr_data_user[idx_baris][5]
            date_born = arr_data_user[idx_baris][1] #tanggal lahir user
            tahun_lahir_user = int(date_born[6:]) #dapatkan tahun lahir user
            break
            
    #dapatkan data id Wahana, harga tiket, batasan umur dan batasan tinggi badan dari array berisi file wahana.csv
    for idx_baris in range (row_length(arr_data_wahana)):
        if arr_data_wahana[idx_baris][0] == ID_Wahana:
            harga_tiket = int(arr_data_wahana[idx_baris][2]) #dapatkan dalam bentuk integer
            batasan_umur = arr_data_wahana[idx_baris][3]
            batasan_tinggi = arr_data_wahana[idx_baris][4]
            break

    #asumsi umur yang mendekati umur tersebut dibulatkan
    #misal usia anak-anak 12 tahun, tahun sekarang 2020, tahun lahir user 2008, maka akan digenapkan menjadi 12 tahun meskipun sebenarnya ia belum ulang tahun pada tahun tersebut
    umur_user = tahun_beli - tahun_lahir_user
    total_harga = (harga_tiket * jumlah_tiket)

    #jika memiliki akun gold harga tiket setengahnya
    if role_user == 'pemain+':
        total_harga = (0.5 * harga_tiket) * jumlah_tiket

    beli_sukses = False #tanda berhasil diproses atau tidak
    if batasan_umur == 'anak-anak' and umur_user <= 12:
        #pada wahana anak-anak tidak ada batas tinggi badan
        if saldo >= total_harga:
            beli_sukses = True
            print("Selamat bersenang-senang di Almond’s Charm!", username)
        else: #saldo tidak cukup
            print("Saldo Anda tidak cukup"); print("Silakan mengisi saldo Anda")
    elif batasan_umur == 'dewasa' and umur_user >= 18:
        if batasan_tinggi == '>=170' and Tinggi_Badan >= 170:
            if saldo >= total_harga:
                beli_sukses = True
                print("Selamat bersenang-senang di Almond’s Charm!", username)
            else: #saldo kurang
                print("Saldo Anda tidak cukup"); print("Silakan mengisi saldo Anda")
        elif batasan_tinggi == '>=170' and Tinggi_Badan < 170:
            print("Anda tidak memenuhi persyaratan untuk memainkan wahana ini."); print("Silakan menggunakan wahana lain yang tersedia.")
        elif batasan_tinggi == 'tanpa batasan':
            if saldo >= total_harga:
                beli_sukses = True
                print("Selamat bersenang-senang di Almond’s Charm!", username)
            else: #saldo kurang
                print("Saldo Anda tidak cukup"); print("Silakan mengisi saldo Anda")
    elif batasan_umur == 'semua umur':
        if batasan_tinggi == '>=170' and Tinggi_Badan >= 170:
            if saldo >= total_harga:
                beli_sukses = True
                print("Selamat bersenang-senang di Almond’s Charm!", username)
            else: #saldo kurang
                print("Saldo Anda tidak cukup"); print("Silakan mengisi saldo Anda")
        elif batasan_tinggi == '>=170' and Tinggi_Badan < 170:
            print("Anda tidak memenuhi persyaratan untuk memainkan wahana ini."); print("Silakan menggunakan wahana lain yang tersedia.")
        elif batasan_tinggi == 'tanpa batasan':
            if saldo >= total_harga:
                beli_sukses = True
                print("Selamat bersenang-senang di Almond’s Charm!", username)
            else: #saldo kurang
                print("Saldo Anda tidak cukup"); print("Silakan mengisi saldo Anda")
    else: #tidak ada persyaratan yang memenuhi
        print("Anda tidak memenuhi persyaratan untuk memainkan wahana ini."); print("Silakan menggunakan wahana lain yang tersedia.")

    data_input = [username, tanggal, ID_Wahana, jumlah_tiket] #menampung data input user untuk dimasukkan ke array_data_beli
    if beli_sukses == True:
        arr_data_user[indeks][6] = (saldo - total_harga) #update nilai saldo user pada array berisi saldo
        indeks_kosong = row_length(arr_data_beli) #dapatkan indeks yang masih kosong
        arr_data_beli[indeks_kosong] = data_input

        tiket_punya = False #False, artinya username belum punya tiket sebelumnya
        for baris in range (row_length(arr_data_tiket)): #cek apakah username sudah memiliki tiket di ID Wahana tersebut atau belum
            if arr_data_tiket[baris][0] == username and arr_data_tiket[baris][1] == ID_Wahana:
                arr_data_tiket[baris][2] = int(arr_data_tiket[baris][2]) + jumlah_tiket #update jumlah tiket dimiliki
                tiket_punya = True
                break
        if tiket_punya == False:
            data_tiket = [username, ID_Wahana, jumlah_tiket]
            idx_empty = row_length(arr_data_tiket) #dapatkan indeks yang masih kosong untuk diisi data
            arr_data_tiket[idx_empty] = data_tiket
	    
def upgrade_gold(data_user):
    # untuk akun gold saldo harus Rp75000
    print('========================')
    print("Untuk upgrade, pastikan saldo pemain >= Rp75000")
    username = input("Masukkan username yang ingin di-upgrade: ")
    success = False
    for i in range(7):
        if data_user[i][3] == username and int(data_user[i][6]) >= 75000:
            data_user[i][5] = 'pemain+'     #update role, pemain+ adalah golden account
            data_user[i][6] = int(data_user[i][6]) - 75000    #update saldo
            print("Akun", username, "telah diupgrade.")
            success = True
            break
    if not success:
    	print("Username tidak ditemukan / saldo tidak cukup")
            
#Tambahan prosedur untuk program utama
def show_menu_player():
    print()
    batas = '='*30
    print(batas)
    print("1.Cari Wahana                 ||")
    print("2.Beli Tiket Wahana           ||")
    print("3.Main ke Wahana              ||")
    print("4.Refund Tiket                ||")
    print("5.Kotak Kritik dan Saran      ||")
    print("6.Exit                        ||")
    print('7.Save data                   ||')
    print(batas)
    
def show_menu_admin():
    print()
    batas = '='*30
    print("1.SignUp pemain")
    print('2.Cari pemain')
    print('3.Cari Wahana')
    print('4.Lihat Daftar Kritik dan Saran')
    print('5.Tambah Wahana Baru')
    print('6.TopUp saldo pemain')
    print('7.Lihat Riwayat Penggunaan Wahana')
    print('8.Lihat jumlah tiket pemain')
    print('9.Exit')
    print('10.Save data')
    batas = '='*30


#Endof Bagian Jafar










#Bagian Yudi

#Prosedur Penggunaan Tiket
#Parameter : username, array data kepemilikan tiket, array data penggunaan wahana
def Use_Tiket (_username, _data_kepemilikan_tiket, _data_penggunaan_wahana):

	nKepemilikanTiket = row_length(_data_kepemilikan_tiket)
	nPenggunaanWahana = row_length(_data_penggunaan_wahana)

	dataPenggunaan = ["" for i in range(4)]
	valid = False
	while(not valid and nKepemilikanTiket != 0):

		ID = input("Masukkan ID wahana : ")
		date = input("Masukkan tanggal hari ini : ")
		tickets = input("Jumlah tiket yang digunakan : ")

		for i in range(nKepemilikanTiket):
			if (_data_kepemilikan_tiket[i][0] == _username):
				if (_data_kepemilikan_tiket[i][1] == ID and _data_kepemilikan_tiket[i][2] >= tickets and tickets != 0):
					valid = True		
					idx = i	

		if (not valid):
			print("\nTiket Anda tidak valid dalam sistem kami")
		else:
			print("\nTerima kasih telah bermain.")


	if (valid):
		dataPenggunaan[0] = _username
		dataPenggunaan[1] = date
		dataPenggunaan[2] = ID
		dataPenggunaan[3] = tickets

		_data_kepemilikan_tiket[idx][2] = str(int(_data_kepemilikan_tiket[idx][2]) - int(tickets))	#Pengurangan tiket
	
		_data_penggunaan_wahana[nPenggunaanWahana] = dataPenggunaan


#Prosedur menambahkan wahana baru. 
#Parameter : array data wahana
def Tambah_Wahana(_data_wahana):
#Semua input dianggap valid
	print("Masukkan Informasi Wahana yang ditambahkan : ")

	nRow = row_length(_data_wahana)

	newWahana = ["" for i in range(5)] 		#Banyak kolom data wahana : 5

	newWahana[0] = input("Masukkan ID Wahana : ")		#ID wahana
	newWahana[1] = input("Masukkan Nama Wahana : ")		#Nama wahana
	newWahana[2] = input("Masukkan Harga Tiket : ")		#Harga tiket wahana
	newWahana[3] = input("Batasan umur : ")				#Umur
	newWahana[4] = input("Batasan tinggi badan : ")		#Tinggi

	try:
		_data_wahana[nRow] = newWahana
		print("\nInfo wahana telah ditambahkan!")
	except IndexError :		#jika array database wahana sudah penuh
		print("\nPenambahan tidak dapat dilakukkan, database wahana telah penuh!")


#End of bagian Yudi














#Bagian Karlsen

#fungsi login
username = input("Please enter your username: ")
password = input("Please enter your password: ")

def login(username, password):

    found = False
    for i in range(0, 7):
        if array_data[i][3] == username and array_data[i][4] == password:
            print("You are logged in")
            found = True
            return True
    if found = False:
        print("Wrong username or password")
        return False
	
	
def cari_wahana(arr_data_wahana):
    print("Jenis batasan umur: ")
    print("1. Anak-anak (<17 tahun")
    print("2. Dewasa (>=17 tahun)")
    print("3. Semua umur")
    print()
    print("Jenis batasan tinggi badan: ")
    print("1. Lebih dari 170 cm")
    print("2. Tanpa batasan")
    print()
    
    cek_valid_umur = False
    cek_valid_tinggi = False

    while cek_valid_umur == False:
        umur_pemain = input("Batasan umur pemain: ")

        if (umur_pemain == "1") or (umur_pemain == "2") or (umur_pemain == "3"):
            cek_valid_umur = True
            while cek_valid_tinggi == False:  
                tinggi_badan = input("Batasan tinggi badan: ")
                if (tinggi_badan == "1") or (tinggi_badan == "2"):
                    cek_valid_tinggi = True
                    print()     #hanya sebagai enter
                    #pada bagian ini batasan umur dan tinggi badan sudah valid
                    
                    print("Hasil pencarian: ")
                    found = False
                    if (umur_pemain == "1") and (tinggi_badan == "1"):
                        for baris in range (row_length(arr_data_wahana)):
                            if (arr_data_wahana[baris][3] == "anak-anak") and (arr_data_wahana[baris][4] == ">= 170 cm"):
                                print(str(arr_data_wahana[baris][0]), " | " , str(arr_data_wahana[baris][1]), " | " , str(arr_data_wahana[baris][2]))
                                found = True
                            elif (baris == (row_length(arr_data_wahana))) and (found == False):
                                print("Tidak ada wahana yang sesuai dengan pencarian kamu.")                                

                    elif (umur_pemain == "1") and (tinggi_badan == "2"):
                        for baris in range (row_length(arr_data_wahana)):
                            if (arr_data_wahana[baris][3] == "anak-anak") and (arr_data_wahana[baris][4] == "tanpa batasan"):
                                print(str(arr_data_wahana[baris][0]), " | " , str(arr_data_wahana[baris][1]), " | " , str(arr_data_wahana[baris][2]))
                                found = True
                            elif (baris == (row_length(arr_data_wahana))) and (found == False):
                                print("Tidak ada wahana yang sesuai dengan pencarian kamu.") 
                                
                    elif (umur_pemain == "2") and (tinggi_badan == "1"):
                        for baris in range (row_length(arr_data_wahana)):
                            if (arr_data_wahana[baris][3] == "dewasa") and (arr_data_wahana[baris][4] == ">= 170 cm"):
                                print(str(arr_data_wahana[baris][0]), " | " , str(arr_data_wahana[baris][1]), " | " , str(arr_data_wahana[baris][2]))
                                found = True
                            elif (baris == (row_length(arr_data_wahana))) and (found == False):
                                print("Tidak ada wahana yang sesuai dengan pencarian kamu.") 

                    elif (umur_pemain == "2") and (tinggi_badan == "2"):
                        for baris in range (row_length(arr_data_wahana)):
                            if (arr_data_wahana[baris][3] == "dewasa") and (arr_data_wahana[baris][4] == "tanpa batasan"):
                                print(str(arr_data_wahana[baris][0]), " | " , str(arr_data_wahana[baris][1]), " | " , str(arr_data_wahana[baris][2]))
                                found = True
                            elif (baris == (row_length(arr_data_wahana))) and (found == False):
                                print("Tidak ada wahana yang sesuai dengan pencarian kamu.") 

                    elif (umur_pemain == "3") and (tinggi_badan == "1"):
                        for baris in range (row_length(arr_data_wahana)):
                            if (arr_data_wahana[baris][3] == "semua umur") and (arr_data_wahana[baris][4] == ">= 170 cm"):
                                print(str(arr_data_wahana[baris][0]), " | " , str(arr_data_wahana[baris][1]), " | " , str(arr_data_wahana[baris][2]))
                                found = True
                            elif (baris == (row_length(arr_data_wahana))) and (found == False):
                                print("Tidak ada wahana yang sesuai dengan pencarian kamu.") 

                    elif (umur_pemain == "3") and (tinggi_badan == "2"):
                        for baris in range (row_length(arr_data_wahana)):
                            if (arr_data_wahana[baris][3] == "semua umur") and (arr_data_wahana[baris][4] == "tanpa batasan"):
                                print(str(arr_data_wahana[baris][0]), " | " , str(arr_data_wahana[baris][1]), " | " , str(arr_data_wahana[baris][2]))
                                found = True
                            elif (baris == (row_length(arr_data_wahana))) and (found == False):
                                print("Tidak ada wahana yang sesuai dengan pencarian kamu.") 

                else:       #input diluar pilihan 1 dan 2
                    print("Batasan tinggi badan tidak valid!")
        else:       #input diluar pilihan 1, 2, dan 3
            print("Batasan umur tidak valid!")









#Endof bagian Karlsen




















#Bagian Bona
#fungsi untuk sign_up user baru oleh admin
def sign_up(arr_user) :
    nama = input("Masukkan nama pemain: ")
    tgl_lahir = input("Masukkan tanggal lahir pemain (DD/MM/YYYY): ")
    tinggi_badan = int(input("Masukkan tinggi badan pemain (cm): "))
    #Vallidasi username
    while (True) :
        new_username = input("Masukkan username pemain: ")
        found = False
        for baris in range (row_length(user_data)) :
            if (user_data[baris][3] == username) :
                found = True
                break
        if (not found) :
            break
        else :
            print ("username sudah dipakai, silahkan masukkan username lainnya!")

    password = input("Masukkan password pemain: ")
    role = "pemain"
    saldo = 0
    #Mencari indeks array kosong
    empty_index = row_length (arr_user)
    #Terminasi
    new_data = [nama, tgl_lahir, tinggi_badan, new_username, password, role, saldo]
    arr_user[empty_index] = new_data
    print("Selamat menjadi pemain, "+str(nama)+". Selamat bermain.")
    return()

#fungsi refund tiket (pengembalian dana sebesar 75% dari harga tiket yang direfund)
def refund(username, arr_tiket, arr_wahana, arr_user, arr_refund):
    #Asumsi ID_wahana selalu valid
    ID_wahana = input("Masukkan ID wahana: ")
    tanggal = int("Masukkan Tanggal Refund (DD/MM/YYYY): ")
    amount_ticket = int(input("Jumlah tiket yang di-refund: "))

    #Validasi ketersediaan tiket user
    found = False
    for i in range (row_length(arr_tiket)) :
        if ((arr_tiket[i][0] == username) and (arr_tiket[i][1] == ID_wahana)) :
            if (int(arr_tiket[i][2]) >= amount_ticket) :
                found = True
                index_tiket = i
                break
    #Mencari indeks pada array wahana
    for i in range (row_length(arr_wahana)) :
        if (arr_wahana[i][0] == ID_wahana) :
            index_wahana = i
            break
    #Mencari indeks pada array user
    for i in range (row_length(arr_user)) :
        if (arr_user[i][3] == username) :
            index_user = i
            break
    #Mencari indeks pada array yang masih kosong
    empty_index = row_length (arr_user)
    #Terminasi
    if (not found) :
        print("Anda tidak memiliki tiket terkait.")
    else : #found
        #Menghitung sisa tiket
        arr_tiket[index_tiket][2] = int(arr_tiket[index_tiket][2]) - amount_ticket
        #Menghitung saldo akhir
        if (arr_user[index_user][5] == "pemain+") :
        arr_user[index_user][6] = int(arr_user[index_user][6]) + 0.5*0.75*amount_ticket*int(arr_wahana[index_wahana][2])
        else : #user bukan gold account
            arr_user[index_user][6] = int(arr_user[index_user][6]) + 0.75*amount_ticket*int(arr_wahana[index_wahana][2])
        #Mengembalikan input pada array global
        new_data = [username,tanggal,ID_wahana,amount_ticket]
        arr_refund[empty_index] = new_data
        print("Uang refund sudah kami berikan pada akun Anda.")
    return()


#prosedur kritik dan saran
def kritiksaran(username ,arr_kritiksaran) :
    #Asumsi ID Wahana, tanggal pelaporan selalu valid
    ID_wahana = input("Masukkan ID Wahana :")
    tanggal = input("Masukkan tanggal pelaporan (DD/MM/YYYY): ")
    isi_kritik = input("Kritik/saran Anda: ")
    #Mencari indeks pada array yg masih kosong
    empty_index = row_length (arr_user)
    #Terminasi
    new_data = [username, tanggal, ID_wahana, isi_kritik]
    arr_kritiksaran[empty_index] = new_data
    return()
    
#fungsi exit (keluar dari program)    
def exit(arr_user, arr_wahana, arr_pembelian, arr_penggunaan, arr_tiket, arr_refund, arr_kritiksaran) :
	#Apakah file mau disimpan?
	save = input("Apakah anda mau melakukan penyimpanan file yang sudah dilakukan (Y/N) ? ")
	if (save == "Y") : #Menyimpan file
		user = input("Masukkan nama File User: ")
		save_file(arr_user, str(user))
		wahana = input("Masukkan nama File Daftar wahana: ")
		save_file(arr_wahana, str(wahana))
		pembelian = input("Masukkan nama File Pembelian Tiket: ")
		save_file(arr_pembelian, str(pembelian))
		penggunaan = input("Masukkan nama File Penggunaan Tiket: ")
		save_file(arr_penggunaan, str(penggunaan))
		tiket = input("Masukkan nama File Kepemilikan Tiket: ")
		save_file(arr_tiket, str(tiket))
		refund = input("Masukkan nama File Refund Tiket: ")
		save_file(arr_refund, str(refund))
		kritiksaran = input("Masukkan nama File Kritik dan Saran: ")
		save_file(arr_kritiksaran, str(kritiksaran))
		

		print("Data berhasil disimpan!")
	return(True)









#End of bagian Bona



